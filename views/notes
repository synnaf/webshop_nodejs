


/*  ---------------------  HÄMTA CONFIRMATION   -----------------------  */

router.get(ROUTE.confirmation, verifyToken, async (req, res) => {

    if (verifyToken) {
        //här vill vi populera Order utifrån user 
        const showUserInfo = await UserModel.findOne({ _id: req.body.userInfo._id })
            .populate('wishlist.productId', {
                artist: 1,
                album: 1,
                price: 1
            })
        res.status(202).render(VIEW.checkout, { ROUTE, showUserInfo, token: (req.cookies.jsonwebtoken !== undefined) ? true : false })
    } else {
        return res.status(202).render(VIEW.checkout, {
            ROUTE,
            showUserInfo: "empty order",
            token: (req.cookies.jsonwebtoken !== undefined) ? true : false
        })
    }
    
    //     //när man trycker på beställ: 
    //     //hitta enligt produktmodellen - mer än en 
    //     const products = await ProductModel.findOne({
    //         _id: req.params.id
    //     });

    //     //hitta enligt usermodellen 
    //     const user = await UserModel.findOne({
    //         _id: req.body.userInfo._id
    //     });

    //     //lägg till enligt metoden 
    //     user.orderProducts(products);

    //     //skicka användaren till confirmation??? eller vart ska användaren 
    //     return res.redirect("/orderconfirmation")

    // } else {
    //     return res.status(202).render(VIEW.confirmation, {
    //         ROUTE,
    //         showUserInfo: "Ingen order",
    //         token: (req.cookies.jsonwebtoken !== undefined) ? true : false
    //     })
    // }
})


//i routen dit man redirectas sedan kommer populate att ske 
router.get("/orderconfirmation", async (req,res)=> {

    //hittar ej användaren 
    const showUserInfo = await UserModel.findOne({ _id: req.body.userInfo._id }).populate('Orders.ordedByUser'); 
    console.log(showUserInfo + " trying to find user")
    
    res.send("Hej" + showUserInfo);
    // res.render(VIEW.confirmation, { ROUTE, showUserInfo, token: (req.cookies.jsonwebtoken !== undefined) ? true : false })

})



----------------

        <div class="wishlist-shoppingcart-continer">
            
            <% showUserInfo.wishlist.forEach( (obj)=> { %>
            <div class="wishlist-shoppingcart-innercontiner">
                <div class="wishlist-shoppingcart-info">
                    <div class="wishlist-shoppingcart-item ">Album: <%= obj.productId.album %> </div>
                    <div class="wishlist-shoppingcart-item ">Artist: <%= obj.productId.artist %> </div>
                    <div class="wishlist-shoppingcart-item ">Album ID: <%= obj.productId._id %> </div>
                    <div class="wishlist-shoppingcart-item ">Pris: <%= obj.productId.price %> SEK</div>
                    <div class="shoppingcart-item"><a href="/delete/<%=obj.productId._id%>">
                        <button type="button">TA BORT</button></a>
                    </div>
                </div>
            </div>
                <% }); %>
        </div>




        --------------

        För att lägga till en betalningstjänt behöver vi ett tredjepartssystem. 
        Det förenklar för oss, och känns säkrare för användaren.  

        STRIPE API, KLARNA, PAYPAL är populära lösningar. 
        
        > Vi behöver en api-nyckel. På så sätt får vi tillgång till deras tjänst. Som ett password och ett användarnamn. 
        > Aktivera vår bank. 
        > Aktivera kontot. 

        > Developer > Api-nycklar. Här finns våra nycklar. 


        > Order-länk som redirectar oss till order-router, renderar en ejs-fil där vi kan plocka information.
        > Order router - renderar checkout.ejs. stämmer av betalningsuppgifter - går till stripe. 
        > sen går vi till stripe. på stripe matar användaren in information, stripe kontrollerar. 
        > Sen skickar stripe vidare till en success eller en fail-router (order confirmation). 


        > det är i checkout.ejs som vi skriver logik för att redriecta till stripe. 
